(ns codes.clj.docs.frontend.aux.fixtures.namespaces)

(def namespaces
  {:namespaces [{:artifact "clojure",
                 :author "Jason Sankey",
                 :col 1,
                 :doc "clojure.test extension for JUnit-compatible XML output.\n\n  JUnit (http://junit.org/) is the most popular unit-testing library\n  for Java.  As such, tool support for JUnit output formats is\n  common.  By producing compatible output from tests, this tool\n  support can be exploited.\n\n  To use, wrap any calls to clojure.test/run-tests in the\n  with-junit-output macro, like this:\n\n    (use 'clojure.test)\n    (use 'clojure.test.junit)\n\n    (with-junit-output\n      (run-tests 'my.cool.library))\n\n  To write the output to a file, rebind clojure.test/*test-out* to\n  your own PrintWriter (perhaps opened using\n  clojure.java.io/writer).",
                 :end-col 35,
                 :end-row 39,
                 :filename "/src/clj/clojure/test/junit.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/test/junit.clj#L17",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.test.junit",
                 :meta {},
                 :name "clojure.test.junit",
                 :name-col 3,
                 :name-end-col 21,
                 :name-end-row 37,
                 :name-row 37,
                 :project-id "org.clojure/clojure",
                 :row 17}
                {:artifact "clojure",
                 :author "Rich Hickey",
                 :col 1,
                 :doc "XML reading/writing.",
                 :end-col 60,
                 :end-row 13,
                 :filename "/src/clj/clojure/xml.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/xml.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.xml",
                 :meta {},
                 :name "clojure.xml",
                 :name-col 3,
                 :name-end-col 14,
                 :name-end-row 11,
                 :name-row 11,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Rich Hickey",
                 :col 1,
                 :doc "Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet",
                 :end-col 51,
                 :end-row 16,
                 :filename "/src/clj/clojure/zip.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/zip.clj#L12",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.zip",
                 :meta {},
                 :name "clojure.zip",
                 :name-col 3,
                 :name-end-col 14,
                 :name-end-row 15,
                 :name-row 15,
                 :project-id "org.clojure/clojure",
                 :row 12}
                {:artifact "clojure",
                 :author "Alex Miller",
                 :col 1,
                 :doc "Socket server support",
                 :end-col 48,
                 :end-row 19,
                 :filename "/src/clj/clojure/core/server.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.core.server",
                 :meta {},
                 :name "clojure.core.server",
                 :name-col 3,
                 :name-end-col 22,
                 :name-end-row 11,
                 :name-row 11,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :col 1,
                 :doc "Functions to turn objects into data. Alpha, subject to change",
                 :end-col 45,
                 :end-row 11,
                 :filename "/src/clj/clojure/datafy.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/datafy.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.datafy",
                 :meta {},
                 :name "clojure.datafy",
                 :name-col 3,
                 :name-end-col 17,
                 :name-end-row 10,
                 :name-row 10,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:added "1.3",
                 :artifact "clojure",
                 :author "Stuart Halloway",
                 :col 1,
                 :doc "Reflection on Host Types\nAlpha - subject to change.\n\nTwo main entry points: \n\n* type-reflect reflects on something that implements TypeReference.\n* reflect (for REPL use) reflects on the class of an instance, or\n  on a class if passed a class\n\nKey features:\n\n* Exposes the read side of reflection as pure data. Reflecting\n  on a type returns a map with keys :bases, :flags, and :members.\n\n* Canonicalizes class names as Clojure symbols. Types can extend\n  to the TypeReference protocol to indicate that they can be\n  unambiguously resolved as a type name. The canonical format\n  requires one non-Java-ish convention: array brackets are <>\n  instead of [] so they can be part of a Clojure symbol.\n\n* Pluggable Reflectors for different implementations. The default\n  JavaReflector is good when you have a class in hand, or use\n  the AsmReflector for \"hands off\" reflection without forcing\n  classes to load.\n\nPlatform implementers must:\n\n* Create an implementation of Reflector.\n* Create one or more implementations of TypeReference.\n* def default-reflector to be an instance that satisfies Reflector.",
                 :end-col 36,
                 :end-row 42,
                 :filename "/src/clj/clojure/reflect.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/reflect.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.reflect",
                 :meta {},
                 :name "clojure.reflect",
                 :name-col 3,
                 :name-end-col 18,
                 :name-end-row 41,
                 :name-row 41,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Stuart Sierra",
                 :col 1,
                 :doc "clojure.test extensions for the Test Anything Protocol (TAP)\n\n  TAP is a simple text-based syntax for reporting test results.  TAP\n  was originally developed for Perl, and now has implementations in\n  several languages.  For more information on TAP, see\n  http://testanything.org/ and\n  http://search.cpan.org/~petdance/TAP-1.0.0/TAP.pm\n\n  To use this library, wrap any calls to\n  clojure.test/run-tests in the with-tap-output macro,\n  like this:\n\n    (use 'clojure.test)\n    (use 'clojure.test.tap)\n\n    (with-tap-output\n     (run-tests 'my.cool.library))",
                 :end-col 45,
                 :end-row 43,
                 :filename "/src/clj/clojure/test/tap.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/test/tap.clj#L23",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.test.tap",
                 :meta {},
                 :name "clojure.test.tap",
                 :name-col 3,
                 :name-end-col 19,
                 :name-end-row 41,
                 :name-row 41,
                 :project-id "org.clojure/clojure",
                 :row 23}
                {:artifact "clojure",
                 :author "Rich Hickey",
                 :col 1,
                 :doc "A library for reduction and parallel folding. Alpha and subject\n      to change.",
                 :end-col 38,
                 :end-row 15,
                 :filename "/src/clj/clojure/core/reducers.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/reducers.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.core.reducers",
                 :meta {},
                 :name "clojure.core.reducers",
                 :name-col 3,
                 :name-end-col 24,
                 :name-end-row 13,
                 :name-row 13,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Christophe Grand",
                 :col 1,
                 :doc "Helper namespace for clojure.java.browse.\n            Prevents console apps from becoming GUI unnecessarily.",
                 :end-col 26,
                 :end-row 13,
                 :filename "/src/clj/clojure/java/browse_ui.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/browse_ui.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.java.browse-ui",
                 :meta {},
                 :name "clojure.java.browse-ui",
                 :name-col 3,
                 :name-end-col 25,
                 :name-end-row 13,
                 :name-row 13,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Rich Hickey",
                 :col 1,
                 :doc "DEPRECATED Wrapper of the ForkJoin library (JSR-166).",
                 :end-col 22,
                 :end-row 11,
                 :filename "/src/clj/clojure/parallel.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/parallel.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.parallel",
                 :meta {},
                 :name "clojure.parallel",
                 :name-col 5,
                 :name-end-col 21,
                 :name-end-row 11,
                 :name-row 11,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Chris Houser, Stuart Halloway",
                 :col 1,
                 :doc "Conveniently launch a sub-process providing its stdin and\ncollecting its stdout",
                 :end-col 40,
                 :end-row 16,
                 :filename "/src/clj/clojure/java/shell.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/shell.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.java.shell",
                 :meta {},
                 :name "clojure.java.shell",
                 :name-col 3,
                 :name-end-col 21,
                 :name-end-row 13,
                 :name-row 13,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Stuart Sierra, Stuart Halloway, David Liebke",
                 :col 1,
                 :doc "Clojure String utilities\n\nIt is poor form to (:use clojure.string). Instead, use require\nwith :as to specify a prefix, e.g.\n\n(ns your.namespace.here\n  (:require [clojure.string :as str]))\n\nDesign notes for clojure.string:\n\n1. Strings are objects (as opposed to sequences). As such, the\n   string being manipulated is the first argument to a function;\n   passing nil will result in a NullPointerException unless\n   documented otherwise. If you want sequence-y behavior instead,\n   use a sequence.\n\n2. Functions are generally not lazy, and call straight to host\n   methods where those are available and efficient.\n\n3. Functions take advantage of String implementation details to\n   write high-performing loop/recurs instead of using higher-order\n   functions. (This is not idiomatic in general-purpose application\n   code.)\n\n4. When a function is documented to accept a string argument, it\n   will take any implementation of the correct *interface* on the\n   host platform. In Java, this is CharSequence, which is more\n   general than String. In ordinary usage you will almost always\n   pass concrete strings. If you are doing something unusual,\n   e.g. passing a mutable implementation of CharSequence, then\n   thread-safety is your responsibility.",
                 :end-col 49,
                 :end-row 44,
                 :filename "/src/clj/clojure/string.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/string.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.string",
                 :meta {},
                 :name "clojure.string",
                 :name-col 3,
                 :name-end-col 17,
                 :name-end-row 41,
                 :name-row 41,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Stuart Sierra, with contributions and suggestions by \n  Chas Emerick, Allen Rohner, and Stuart Halloway",
                 :col 1,
                 :doc "A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the \"is\" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (= 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith \"abcde\" \"ab\"))\n\n   You can type an \"is\" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user> (is (= 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (= 5 (+ 2 2))\n         actual: (not (= 5 4))\n       false\n\n   The \"expected:\" line shows you the original expression, and the\n   \"actual:\" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not = to 5.  Finally, the\n   \"false\" on the last line is the value returned from the\n   expression.  The \"is\" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   \"(is (thrown? c ...))\" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0))) \n\n   \"(is (thrown-with-msg? c re ...))\" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #\"Divide by zero\"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   \"is\" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (= 5 (+ 2 2)) \"Crazy arithmetic\")\n\n   In addition, you can document groups of assertions with the\n   \"testing\" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to \"testing\" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec <http://rspec.info/>\n\n   (testing \"Arithmetic\"\n     (testing \"with positive integers\"\n       (is (= 4 (+ 2 2)))\n       (is (= 7 (+ 3 4))))\n     (testing \"with negative integers\"\n       (is (= -4 (+ -2 -2)))\n       (is (= -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the \"testing\" macro may only be used\n   INSIDE a \"deftest\" or \"with-test\" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The \"with-test\" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (= 4 (my-function 2 2)))\n     (is (= 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id=51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (= 4 (+ 2 2)))\n     (is (= 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (= 1 (- 4 3)))\n     (is (= 3 (- 7 4))))\n\n   This creates functions named \"addition\" and \"subtraction\", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel's \"Practical Common Lisp\"\n   <http://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html>\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   \"(arithmetic addition)\", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function \"(run-tests namespaces...)\":\n\n   (run-tests 'your.namespace 'some.other.namespace)\n\n   If you don't specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use \"(run-all-tests)\".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the \"arithmetic\" example above, you\n   probably do not want the \"addition\" and \"subtraction\" tests run\n   separately.  In that case, you must define a special function\n   named \"test-ns-hook\" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable \"*load-tests*\" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by \"with-test\" or \"deftest\".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  \"each\"\n   fixtures are run repeatedly, once for each test function created\n   with \"deftest\" or \"with-test\".  \"each\" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   \"each\" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a \"once\" fixture, is only run once,\n   around ALL the tests in the namespace.  \"once\" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach \"once\" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the \"is\" macro by defining new\n   methods for the \"assert-expr\" multimethod.  These methods are\n   called during expansion of the \"is\" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the \"report\" function: (report event)\n\n   The 'event' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to 'is'\n\n   The \"testing\" strings will be a list in \"*testing-contexts*\", and\n   the vars being tested will be a list in \"*testing-vars*\".\n\n   Your \"report\" function should wrap any printing calls in the\n   \"with-test-out\" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n",
                 :end-col 39,
                 :end-row 237,
                 :filename "/src/clj/clojure/test.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/test.clj#L17",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.test",
                 :meta {},
                 :name "clojure.test",
                 :name-col 3,
                 :name-end-col 15,
                 :name-end-row 234,
                 :name-row 234,
                 :project-id "org.clojure/clojure",
                 :row 17}
                {:artifact "clojure",
                 :author "Christophe Grand, Stuart Sierra",
                 :col 1,
                 :doc "A repl helper to quickly open javadocs.",
                 :end-col 20,
                 :end-row 14,
                 :filename "/src/clj/clojure/java/javadoc.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/javadoc.clj#L8",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.java.javadoc",
                 :meta {},
                 :name "clojure.java.javadoc",
                 :name-col 3,
                 :name-end-col 23,
                 :name-end-row 11,
                 :name-row 11,
                 :project-id "org.clojure/clojure",
                 :row 8}
                {:artifact "clojure",
                 :author "Alex Miller",
                 :col 1,
                 :doc "Clojure wrapper functions for java.lang.Math static methods.\n\n  Function calls are inlined for performance, and type hinted for primitive\n  long or double parameters where appropriate. In general, Math methods are\n  optimized for performance and have bounds for error tolerance. If\n  greater precision is needed, use java.lang.StrictMath directly instead.\n\n  For more complete information, see:\n  https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html",
                 :end-col 16,
                 :end-row 20,
                 :filename "/src/clj/clojure/math.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/math.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.math",
                 :meta {},
                 :name "clojure.math",
                 :name-col 3,
                 :name-end-col 15,
                 :name-end-row 20,
                 :name-row 20,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Christophe Grand",
                 :col 1,
                 :doc "Start a web browser from Clojure",
                 :end-col 64,
                 :end-row 17,
                 :filename "/src/clj/clojure/java/browse.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/browse.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.java.browse",
                 :meta {},
                 :name "clojure.java.browse",
                 :name-col 3,
                 :name-end-col 22,
                 :name-end-row 12,
                 :name-row 12,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Stuart Sierra, Chas Emerick, Stuart Halloway",
                 :col 1,
                 :doc "This file defines polymorphic I/O utility functions for Clojure.",
                 :end-col 77,
                 :end-row 22,
                 :filename "/src/clj/clojure/java/io.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/java/io.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.java.io",
                 :meta {},
                 :name "clojure.java.io",
                 :name-col 5,
                 :name-end-col 20,
                 :name-end-row 12,
                 :name-row 12,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Stuart Sierra",
                 :col 1,
                 :doc "Print stack traces oriented towards Clojure, not Java.",
                 :end-col 22,
                 :end-row 16,
                 :filename "/src/clj/clojure/stacktrace.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/stacktrace.clj#L14",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.stacktrace",
                 :meta {},
                 :name "clojure.stacktrace",
                 :name-col 3,
                 :name-end-col 21,
                 :name-end-row 16,
                 :name-row 16,
                 :project-id "org.clojure/clojure",
                 :row 14}
                {:artifact "clojure",
                 :author "Rich Hickey",
                 :col 1,
                 :doc "Graphical object inspector for Clojure data structures.",
                 :end-col 92,
                 :end-row 17,
                 :filename "/src/clj/clojure/inspector.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/inspector.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.inspector",
                 :meta {},
                 :name "clojure.inspector",
                 :name-col 5,
                 :name-end-col 22,
                 :name-end-row 11,
                 :name-row 11,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:added "1.2",
                 :artifact "clojure",
                 :author "Tom Faulhaber",
                 :col 1,
                 :doc "A Pretty Printer for Clojure\n\nclojure.pprint implements a flexible system for printing structured data\nin a pleasing, easy-to-understand format. Basic use of the pretty printer is \nsimple, just call pprint instead of println. More advanced users can use \nthe building blocks provided to create custom output formats. \n\nOut of the box, pprint supports a simple structured format for basic data \nand a specialized format for Clojure source code. More advanced formats, \nincluding formats that don't look like Clojure data at all like XML and \nJSON, can be rendered by creating custom dispatch functions. \n\nIn addition to the pprint function, this module contains cl-format, a text \nformatting function which is fully compatible with the format function in \nCommon Lisp. Because pretty printing directives are directly integrated with\ncl-format, it supports very concise custom dispatch. It also provides\na more powerful alternative to Clojure's standard format function.\n\nSee documentation for pprint and cl-format for more information or \ncomplete documentation on the Clojure web site on GitHub.",
                 :end-col 40,
                 :end-row 39,
                 :filename "/src/clj/clojure/pprint.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/pprint.clj#L14",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.pprint",
                 :meta {},
                 :name "clojure.pprint",
                 :name-col 5,
                 :name-end-col 19,
                 :name-end-row 37,
                 :name-row 37,
                 :project-id "org.clojure/clojure",
                 :row 14}
                {:artifact "clojure",
                 :author "Stephen C. Gilardi and Rich Hickey",
                 :col 1,
                 :doc "Top-level main function for Clojure REPL and scripts.",
                 :end-col 4,
                 :end-row 22,
                 :filename "/src/clj/clojure/main.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/main.clj#L11",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.main",
                 :meta {},
                 :name "clojure.main",
                 :name-col 3,
                 :name-end-col 15,
                 :name-end-row 13,
                 :name-row 13,
                 :project-id "org.clojure/clojure",
                 :row 11}
                {:artifact "clojure",
                 :author "Stuart Sierra",
                 :col 1,
                 :doc "Macros that expand to repeated copies of a template expression.",
                 :end-col 38,
                 :end-row 28,
                 :filename "/src/clj/clojure/template.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/template.clj#L25",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.template",
                 :meta {},
                 :name "clojure.template",
                 :name-col 3,
                 :name-end-col 19,
                 :name-end-row 27,
                 :name-row 27,
                 :project-id "org.clojure/clojure",
                 :row 25}
                {:artifact "clojure",
                 :author "Rich Hickey",
                 :col 1,
                 :doc "edn reading.",
                 :end-col 48,
                 :end-row 12,
                 :filename "/src/clj/clojure/edn.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/edn.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.edn",
                 :meta {},
                 :name "clojure.edn",
                 :name-col 3,
                 :name-end-col 14,
                 :name-end-row 11,
                 :name-row 11,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :col 1,
                 :end-col 34,
                 :end-row 11,
                 :filename "/src/clj/clojure/instant.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/instant.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.instant",
                 :meta {},
                 :name "clojure.instant",
                 :name-col 5,
                 :name-end-col 20,
                 :name-end-row 9,
                 :name-row 9,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Chris Houser, Christophe Grand, Stephen Gilardi, Michel Salim",
                 :col 1,
                 :doc "Utilities meant to be used interactively at the REPL",
                 :end-col 41,
                 :end-row 17,
                 :filename "/src/clj/clojure/repl.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/repl.clj#L11",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.repl",
                 :meta {},
                 :name "clojure.repl",
                 :name-col 3,
                 :name-end-col 15,
                 :name-end-row 14,
                 :name-row 14,
                 :project-id "org.clojure/clojure",
                 :row 11}
                {:artifact "clojure",
                 :author "Stuart Sierra",
                 :col 1,
                 :doc "This file defines a generic tree walker for Clojure data\nstructures.  It takes any data structure (list, vector, map, set,\nseq), calls a function on every element, and uses the return value\nof the function in place of the original.  This makes it fairly\neasy to write recursive search-and-replace functions, as shown in\nthe examples.\n\nNote: \"walk\" supports all Clojure data structures EXCEPT maps\ncreated with sorted-map-by.  There is no (obvious) way to retrieve\nthe sorting function.",
                 :end-col 16,
                 :end-row 33,
                 :filename "/src/clj/clojure/walk.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/walk.clj#L21",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.walk",
                 :meta {},
                 :name "clojure.walk",
                 :name-col 3,
                 :name-end-col 15,
                 :name-end-row 33,
                 :name-row 33,
                 :project-id "org.clojure/clojure",
                 :row 21}
                {:artifact "clojure",
                 :col 1,
                 :end-col 28,
                 :end-row 9,
                 :filename "/src/clj/clojure/core/protocols.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/protocols.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.core.protocols",
                 :meta {},
                 :name "clojure.core.protocols",
                 :name-col 5,
                 :name-end-col 27,
                 :name-end-row 9,
                 :name-row 9,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :col 1,
                 :end-col 18,
                 :end-row 9,
                 :filename "/src/clj/clojure/uuid.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/uuid.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.uuid",
                 :meta {},
                 :name "clojure.uuid",
                 :name-col 5,
                 :name-end-col 17,
                 :name-end-row 9,
                 :name-row 9,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Stuart Halloway",
                 :col 1,
                 :doc "Non-core data functions.",
                 :end-col 36,
                 :end-row 13,
                 :filename "/src/clj/clojure/data.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/data.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.data",
                 :meta {},
                 :name "clojure.data",
                 :name-col 3,
                 :name-end-col 15,
                 :name-end-row 12,
                 :name-row 12,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Rich Hickey",
                 :col 1,
                 :doc "The core Clojure language.",
                 :end-col 16,
                 :end-row 11,
                 :filename "/src/clj/clojure/core.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.core",
                 :meta {},
                 :name "clojure.core",
                 :name-col 3,
                 :name-end-col 15,
                 :name-end-row 11,
                 :name-row 11,
                 :project-id "org.clojure/clojure",
                 :row 9}
                {:artifact "clojure",
                 :author "Rich Hickey",
                 :col 1,
                 :doc "Set operations such as union/intersection.",
                 :end-col 20,
                 :end-row 11,
                 :filename "/src/clj/clojure/set.clj",
                 :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/set.clj#L9",
                 :group "org.clojure",
                 :id "org.clojure/clojure/clojure.set",
                 :meta {},
                 :name "clojure.set",
                 :name-col 8,
                 :name-end-col 19,
                 :name-end-row 11,
                 :name-row 11,
                 :project-id "org.clojure/clojure",
                 :row 9}],
   :project {:artifact "clojure",
             :group "org.clojure",
             :id "org.clojure/clojure",
             :manifest :pom,
             :name "org.clojure/clojure",
             :paths ["/src/clj"
                     "/src/main/clojure"
                     "/src/main/java"
                     "/src/resources"],
             :sha "ce55092f2b2f5481d25cff6205470c1335760ef6",
             :tag "clojure-1.11.1",
             :url "https://github.com/clojure/clojure"}})
