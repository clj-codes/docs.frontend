(ns codes.clj.docs.frontend.test.aux.fixtures.definition)

(def definition-docs
  {:definition {:added "1.10",
                :arglist-strs ["[in-reader out-fn & {:keys [stdin]}]"],
                :artifact "clojure",
                :col 1,
                :defined-by "clojure.core/defn",
                :doc "a REPL with structured output (for programs)\n  reads forms to eval from in-reader (a LineNumberingPushbackReader)\n  Closing the input or passing the form :repl/quit will cause it to return\n\n  Calls out-fn with data, one of:\n  {:tag :ret\n   :val val ;;eval result, or Throwable->map data if exception thrown\n   :ns ns-name-string\n   :ms long ;;eval time in milliseconds\n   :form string ;;iff successfully read\n   :exception true ;;iff exception thrown\n  }\n  {:tag :out\n   :val string} ;chars from during-eval *out*\n  {:tag :err\n   :val string} ;chars from during-eval *err*\n  {:tag :tap\n   :val val} ;values from tap>\n\n  You might get more than one :out or :err per eval, but exactly one :ret\n  tap output can happen at any time (i.e. between evals)\n  If during eval an attempt is made to read *in* it will read from in-reader unless :stdin is supplied\n\n  Alpha, subject to change.",
                :end-col 36,
                :end-row 261,
                :filename "/src/clj/clojure/core/server.clj",
                :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L191",
                :group "org.clojure",
                :id "org.clojure/clojure/clojure.core.server/prepl/0",
                :meta {},
                :name "prepl",
                :name-col 7,
                :name-end-col 12,
                :name-end-row 191,
                :name-row 191,
                :namespace-id "org.clojure/clojure/clojure.core.server",
                :private false,
                :row 191,
                :varargs-min-arity 2},
   :namespace {:artifact "clojure",
               :author "Alex Miller",
               :col 1,
               :doc "Socket server support",
               :end-col 48,
               :end-row 19,
               :filename "/src/clj/clojure/core/server.clj",
               :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L9",
               :group "org.clojure",
               :id "org.clojure/clojure/clojure.core.server",
               :meta {},
               :name "clojure.core.server",
               :name-col 3,
               :name-end-col 22,
               :name-end-row 11,
               :name-row 11,
               :project-id "org.clojure/clojure",
               :row 9},
   :project {:artifact "clojure",
             :group "org.clojure",
             :id "org.clojure/clojure",
             :manifest :pom,
             :name "org.clojure/clojure",
             :paths ["/src/clj"
                     "/src/main/clojure"
                     "/src/main/java"
                     "/src/resources"],
             :sha "ce55092f2b2f5481d25cff6205470c1335760ef6",
             :tag "clojure-1.11.1",
             :url "https://github.com/clojure/clojure"}})

(def definition-social
  {:definition-id "org.clojure/clojure/clojure.core.server/prepl/0",
   :examples [{:author {:account-source "github",
                        :author-id #uuid "42d95952-dc8f-4f97-ab31-b7534a43e728",
                        :avatar-url "https://avatars.githubusercontent.com/u/1683898?v=4",
                        :created-at #inst "2024-03-09T01:23:35.332-00:00",
                        :login "rafaeldelboni"},
               :body "(assoc {} :key1 \"value\" :key2 \"another value\")\n;;=> {:key2 \"another value\", :key1 \"value\"}\n\n;; Here we see an overwrite by a second entry with the same key\n(assoc {:key1 \"old value1\" :key2 \"value2\"} \n        :key1 \"value1\" :key3 \"value3\")\n;;=> {:key3 \"value3\", :key2 \"value2\", :key1 \"value1\"}\n\n;; We see a nil being treated as an empty map\n(assoc nil :key1 4)\n;;=> {:key1 4}\n\n;; 'assoc' can be used on a vector (but not a list), in this way: \n;; (assoc vec index replacement)\n(assoc [1 2 3] 0 10)     ;;=> [10 2 3]\n(assoc [1 2 3] 2 '(4 6)) ;;=> [1 2 (4 6)]\n;; Next, 0 < index <= n, so the following will work\n(assoc [1 2 3] 3 10)     ;;=> [1 2 3 10]\n;; However, when index > n, an error is thrown\n(assoc [1 2 3] 4 10)\n;; java.lang.IndexOutOfBoundsException (NO_SOURCE_FILE:0)\n\n;; From http://clojure-examples.appspot.com/clojure.core/assoc",
               :created-at #inst "2024-03-17T09:59:21.247-00:00",
               :definition-id "org.clojure/clojure/clojure.core/assoc/0",
               :editors [{:account-source "github",
                          :author-id #uuid "42d95952-dc8f-4f97-ab31-b7534a43e728",
                          :avatar-url "https://avatars.githubusercontent.com/u/1683898?v=4",
                          :created-at #inst "2024-03-09T01:23:35.332-00:00",
                          :edited-at #inst "2024-03-17T09:59:21.247-00:00",
                          :login "rafaeldelboni"}],
               :example-id #uuid "f6867425-d71b-478e-ac83-6da49646482b"}
              {:author {:account-source "github",
                        :author-id #uuid "fc12e877-5d44-4a61-b8cf-b2366e35c641",
                        :avatar-url "https://avatars.githubusercontent.com/u/34045",
                        :created-at #inst "2024-03-17T21:01:34.048-00:00",
                        :login "richhickey"},
               :body "(please :stop)",
               :created-at #inst "2024-03-17T21:03:33.253-00:00",
               :definition-id "org.clojure/clojure/clojure.core/assoc/0",
               :editors [{:account-source "github",
                          :author-id #uuid "42d95952-dc8f-4f97-ab31-b7534a43e728",
                          :avatar-url "https://avatars.githubusercontent.com/u/1683898?v=4",
                          :created-at #inst "2024-03-09T01:23:35.332-00:00",
                          :edited-at #inst "2024-03-17T18:39:27.135-00:00",
                          :login "rafaeldelboni"}
                         {:account-source "github",
                          :author-id #uuid "fc12e877-5d44-4a61-b8cf-b2366e35c641",
                          :avatar-url "https://avatars.githubusercontent.com/u/34045",
                          :created-at #inst "2024-03-17T21:01:34.048-00:00",
                          :edited-at #inst "2024-03-17T21:03:33.253-00:00",
                          :login "richhickey"}],
               :example-id #uuid "9b809144-48ea-4df6-975e-a4d67df0828f"}],
   :notes [{:author {:account-source "github",
                     :author-id #uuid "42d95952-dc8f-4f97-ab31-b7534a43e728",
                     :avatar-url "https://avatars.githubusercontent.com/u/1683898?v=4",
                     :created-at #inst "2024-03-09T01:23:35.332-00:00",
                     :login "rafaeldelboni"},
            :body "Here is a version that will create a vector when the key is numerical. This may be useful instead of throwing an IndexOutOfBoundsException.\n```clojure\n(defn assoc-in-idx [m [k & ks] v]\n  (let [value (get m k (when (number? (first ks)) []))\n    m (if (and (vector? m) (number? k) (-> m count (< k)))\n        (reduce (fn [m _] (conj m nil)) m (range (count m) k))\n        m)\n    v (if ks\n        (assoc-in-idx value ks v)\n        v)]\n    (assoc m k v)))\n```",
            :created-at #inst "2024-03-15T13:17:45.414-00:00",
            :definition-id "org.clojure/clojure/clojure.core/assoc/0",
            :note-id #uuid "8b81ce0d-20fd-43e7-a79a-a9edbb0f162a"}
           {:author {:account-source "github",
                     :author-id #uuid "42d95952-dc8f-4f97-ab31-b7534a43e728",
                     :avatar-url "https://avatars.githubusercontent.com/u/1683898?v=4",
                     :created-at #inst "2024-03-09T01:23:35.332-00:00",
                     :login "rafaeldelboni"},
            :body "the API is blurry When applied to a vector\n```clojure\n;; should indicate following\n(assoc vector index val)\n```",
            :created-at #inst "2024-03-15T13:26:17.234-00:00",
            :definition-id "org.clojure/clojure/clojure.core/assoc/0",
            :note-id #uuid "2a704396-78d2-4153-9a0a-31fa1c87e9c8"}],
   :see-alsos []})
