(ns codes.clj.docs.frontend.test.aux.fixtures.definitions
  (:require [clojure.string :as str]))

(def definitions
  {:definitions [{:arglist-strs ["[system-props]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn",
                  :doc "Start all servers specified in the system properties.",
                  :end-col 28,
                  :end-row 161,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{1},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L157",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/start-servers/0",
                  :meta {},
                  :name "start-servers",
                  :name-col 7,
                  :name-end-col 20,
                  :name-end-row 157,
                  :name-row 157,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private false,
                  :row 157}
                 {:arglist-strs ["[name daemon & body]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defmacro",
                  :end-col 15,
                  :end-row 42,
                  :filename "/src/clj/clojure/core/server.clj",
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L38",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/thread/0",
                  :macro true,
                  :meta {},
                  :name "thread",
                  :name-col 21,
                  :name-end-col 27,
                  :name-end-row 38,
                  :name-row 38,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private true,
                  :row 38,
                  :varargs-min-arity 2}
                 {:arglist-strs ["[opts]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn",
                  :doc "Start a socket server given the specified opts:\n    :address Host or address, string, defaults to loopback address\n    :port Port, integer, required\n    :name Name, required\n    :accept Namespaced symbol of the accept function to invoke, required\n    :args Vector of args to pass to accept function\n    :bind-err Bind *err* to socket out stream?, defaults to true\n    :server-daemon Is server thread a daemon?, defaults to true\n    :client-daemon Are client threads daemons?, defaults to true\n   Returns server socket.",
                  :end-col 13,
                  :end-row 123,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{1},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L84",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/start-server/0",
                  :meta {},
                  :name "start-server",
                  :name-col 7,
                  :name-end-col 19,
                  :name-end-row 84,
                  :name-row 84,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private false,
                  :row 84}
                 {:arglist-strs ["[]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn",
                  :doc "REPL with predefined hooks for attachable socket server.",
                  :end-col 22,
                  :end-row 185,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{0},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L180",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/repl/0",
                  :meta {},
                  :name "repl",
                  :name-col 7,
                  :name-end-col 11,
                  :name-end-row 180,
                  :name-row 180,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private false,
                  :row 180}
                 {:arglist-strs ["[{:keys [name port accept] :as opts}]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn-",
                  :doc "Validate server config options",
                  :end-col 71,
                  :end-row 55,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{1},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L50",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/validate-opts/0",
                  :meta {},
                  :name "validate-opts",
                  :name-col 8,
                  :name-end-col 21,
                  :name-end-row 50,
                  :name-row 50,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private true,
                  :row 50}
                 {:arglist-strs ["[]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn",
                  :doc "Initialize repl in user namespace and make standard repl requires.",
                  :end-col 46,
                  :end-row 167,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{0},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L163",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/repl-init/0",
                  :meta {},
                  :name "repl-init",
                  :name-col 7,
                  :name-end-col 16,
                  :name-end-row 163,
                  :name-row 163,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private false,
                  :row 163}
                 {:arglist-strs ["[opts prop]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn-",
                  :doc "Throw if opts does not contain prop.",
                  :end-col 83,
                  :end-row 48,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{2},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L44",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/required/0",
                  :meta {},
                  :name "required",
                  :name-col 8,
                  :name-end-col 16,
                  :name-end-row 44,
                  :name-row 44,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private true,
                  :row 44}
                 {:arglist-strs ["[conn name client-id in out err accept args]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn-",
                  :doc "Start accept function, to be invoked on a client thread, given:\n    conn - client socket\n    name - server name\n    client-id - client identifier\n    in - in stream\n    out - out stream\n    err - err stream\n    accept - accept fn symbol to invoke\n    args - to pass to accept-fn",
                  :end-col 23,
                  :end-row 82,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{8},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L57",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/accept-connection/0",
                  :meta {},
                  :name "accept-connection",
                  :name-col 8,
                  :name-end-col 25,
                  :name-end-row 57,
                  :name-row 57,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private true,
                  :row 57}
                 {:artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defonce",
                  :end-col 31,
                  :end-row 27,
                  :filename "/src/clj/clojure/core/server.clj",
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L27",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/servers/0",
                  :meta {},
                  :name "servers",
                  :name-col 20,
                  :name-end-col 27,
                  :name-end-row 27,
                  :name-row 27,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private true,
                  :row 27}
                 {:arglist-strs ["[valf]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn-",
                  :end-col 11,
                  :end-row 270,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{1},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L263",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/resolve-fn/0",
                  :meta {},
                  :name "resolve-fn",
                  :name-col 8,
                  :name-end-col 18,
                  :name-end-row 263,
                  :name-row 263,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private true,
                  :row 263}
                 {:arglist-strs ["[request-prompt request-exit]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn",
                  :doc "Enhanced :read hook for repl supporting :repl/quit.",
                  :end-col 20,
                  :end-row 178,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{2},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L169",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/repl-read/0",
                  :meta {},
                  :name "repl-read",
                  :name-col 7,
                  :name-end-col 16,
                  :name-end-row 169,
                  :name-row 169,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private false,
                  :row 169}
                 {:added "1.10",
                  :arglist-strs ["[host port in-reader out-fn & {:keys [valf readf] :or {valf read-string readf #(read %1 false %2)}}]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn",
                  :doc "Implements a prepl on in-reader and out-fn by forwarding to a\n  remote [io-]prepl over a socket.  Messages will be read by readf, a\n  fn of a LineNumberingPushbackReader and EOF value or a symbol naming\n  same (default #(read %1 false %2)),\n  :ret and :tap vals will be processed by valf, a fn of one argument\n  or a symbol naming same (default read-string). If that function\n  throws, :val will be unprocessed.\n\n  Alpha, subject to change.",
                  :end-col 29,
                  :end-row 338,
                  :filename "/src/clj/clojure/core/server.clj",
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L295",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/remote-prepl/0",
                  :meta {},
                  :name "remote-prepl",
                  :name-col 7,
                  :name-end-col 19,
                  :name-end-row 295,
                  :name-row 295,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private false,
                  :row 295,
                  :varargs-min-arity 4}
                 {:arglist-strs ["[lock-expr & body]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defmacro",
                  :end-col 31,
                  :end-row 36,
                  :filename "/src/clj/clojure/core/server.clj",
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L29",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/with-lock/0",
                  :macro true,
                  :meta {},
                  :name "with-lock",
                  :name-col 21,
                  :name-end-col 30,
                  :name-end-row 29,
                  :name-row 29,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private true,
                  :row 29,
                  :varargs-min-arity 1}
                 {:artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/def",
                  :end-col 30,
                  :end-row 23,
                  :filename "/src/clj/clojure/core/server.clj",
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L23",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/*session*/0",
                  :meta {},
                  :name "*session*",
                  :name-col 16,
                  :name-end-col 25,
                  :name-end-row 23,
                  :name-row 23,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private false,
                  :row 23}
                 {:added "1.10",
                  :arglist-strs ["[in-reader out-fn & {:keys [stdin]}]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn",
                  :doc "a REPL with structured output (for programs)\n  reads forms to eval from in-reader (a LineNumberingPushbackReader)\n  Closing the input or passing the form :repl/quit will cause it to return\n\n  Calls out-fn with data, one of:\n  {:tag :ret\n   :val val ;;eval result, or Throwable->map data if exception thrown\n   :ns ns-name-string\n   :ms long ;;eval time in milliseconds\n   :form string ;;iff successfully read\n   :exception true ;;iff exception thrown\n  }\n  {:tag :out\n   :val string} ;chars from during-eval *out*\n  {:tag :err\n   :val string} ;chars from during-eval *err*\n  {:tag :tap\n   :val val} ;values from tap>\n\n  You might get more than one :out or :err per eval, but exactly one :ret\n  tap output can happen at any time (i.e. between evals)\n  If during eval an attempt is made to read *in* it will read from in-reader unless :stdin is supplied\n\n  Alpha, subject to change.",
                  :end-col 36,
                  :end-row 261,
                  :filename "/src/clj/clojure/core/server.clj",
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L191",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/prepl/0",
                  :meta {},
                  :name "prepl",
                  :name-col 7,
                  :name-end-col 12,
                  :name-end-row 191,
                  :name-row 191,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private false,
                  :row 191,
                  :varargs-min-arity 2}
                 {:artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defonce",
                  :end-col 42,
                  :end-row 26,
                  :filename "/src/clj/clojure/core/server.clj",
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L26",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/lock/0",
                  :meta {},
                  :name "lock",
                  :name-col 20,
                  :name-end-col 24,
                  :name-end-row 26,
                  :name-row 26,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private true,
                  :row 26}
                 {:added "1.10",
                  :arglist-strs ["[& {:keys [valf] :or {valf pr-str}}]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn",
                  :doc "prepl bound to *in* and *out*, suitable for use with e.g. server/repl (socket-repl).\n  :ret and :tap vals will be processed by valf, a fn of one argument\n  or a symbol naming same (default pr-str)\n\n  Alpha, subject to change.",
                  :end-col 34,
                  :end-row 293,
                  :filename "/src/clj/clojure/core/server.clj",
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L272",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/io-prepl/0",
                  :meta {},
                  :name "io-prepl",
                  :name-col 7,
                  :name-end-col 15,
                  :name-end-row 272,
                  :name-row 272,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private false,
                  :row 272,
                  :varargs-min-arity 0}
                 {:arglist-strs ["[]" "[name]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn",
                  :doc "Stop server with name or use the server-name from *session* if none supplied.\n  Returns true if server stopped successfully, nil if not found, or throws if\n  there is an error closing the socket.",
                  :end-col 19,
                  :end-row 137,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{0 1},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L125",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/stop-server/0",
                  :meta {},
                  :name "stop-server",
                  :name-col 7,
                  :name-end-col 18,
                  :name-end-row 125,
                  :name-row 125,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private false,
                  :row 125}
                 {:arglist-strs ["[ex phase]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn-",
                  :end-col 44,
                  :end-row 189,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{2},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L187",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/ex->data/0",
                  :meta {},
                  :name "ex->data",
                  :name-col 8,
                  :name-end-col 16,
                  :name-end-row 187,
                  :name-row 187,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private true,
                  :row 187}
                 {:arglist-strs ["[props]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn-",
                  :doc "Parse clojure.server.* from properties to produce a map of server configs.",
                  :end-col 15,
                  :end-row 155,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{1},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L146",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/parse-props/0",
                  :meta {},
                  :name "parse-props",
                  :name-col 8,
                  :name-end-col 19,
                  :name-end-row 146,
                  :name-row 146,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private true,
                  :row 146}
                 {:arglist-strs ["[]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn",
                  :doc "Stop all servers ignores all errors, and returns nil.",
                  :end-col 37,
                  :end-row 144,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{0},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L139",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/stop-servers/0",
                  :meta {},
                  :name "stop-servers",
                  :name-col 7,
                  :name-end-col 19,
                  :name-end-row 139,
                  :name-row 139,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private false,
                  :row 139}
                 {:arglist-strs ["[]"],
                  :artifact "clojure",
                  :col 1,
                  :defined-by "clojure.core/defn",
                  :doc "Stop all servers ignores all errors, and returns nil.",
                  :end-col 37,
                  :end-row 144,
                  :filename "/src/clj/clojure/core/server.clj",
                  :fixed-arities #{0},
                  :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L139",
                  :group "org.clojure",
                  :id "org.clojure/clojure/clojure.core.server/stop-servers/0",
                  :meta {},
                  :name "!stop-servers",
                  :name-col 7,
                  :name-end-col 19,
                  :name-end-row 139,
                  :name-row 139,
                  :namespace-id "org.clojure/clojure/clojure.core.server",
                  :private false,
                  :row 139}]
   :namespace {:artifact "clojure",
               :author "Alex Miller",
               :col 1,
               :doc "Socket server support",
               :end-col 48,
               :end-row 19,
               :filename "/src/clj/clojure/core/server.clj",
               :git-source "https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core/server.clj#L9",
               :group "org.clojure",
               :id "org.clojure/clojure/clojure.core.server",
               :meta {},
               :name "clojure.core.server",
               :name-col 3,
               :name-end-col 22,
               :name-end-row 11,
               :name-row 11,
               :project-id "org.clojure/clojure",
               :row 9},
   :project {:artifact "clojure",
             :group "org.clojure",
             :id "org.clojure/clojure",
             :manifest :pom,
             :name "org.clojure/clojure",
             :paths ["/src/clj"
                     "/src/main/clojure"
                     "/src/main/java"
                     "/src/resources"],
             :sha "ce55092f2b2f5481d25cff6205470c1335760ef6",
             :tag "clojure-1.11.1",
             :url "https://github.com/clojure/clojure"}})

(->> definitions
     :definitions
     (sort-by :name)
     (group-by (fn [{:keys [name]}]
                 (if-let [alpha (->> name
                                     str/lower-case
                                     first
                                     (re-matches #"[a-z]"))]
                   alpha
                   "*")))
     (sort-by first))
